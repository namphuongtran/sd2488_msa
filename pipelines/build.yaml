# TODO: Will be separate azure pipeline to build and deploy later
stages:
- stage: Build_BE
  displayName: Build Backend
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: "GIT_COMMIT=$(git rev-parse --short HEAD)\necho \"GIT_COMMIT: ${GIT_COMMIT}\"         \n# set env variable to allow next task to consume\necho \"##vso[task.setvariable variable=GIT_COMMIT]${GIT_COMMIT}\"\n#magic___^_^___line\n"
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - task: Docker@2
      displayName: Build Backend Image
      inputs:
        command: buildAndPush
        repository: $(imageRepository_backend)
        dockerfile: $(dockerfilePath_backend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)-$(GIT_COMMIT)

    - task: trivy@1
      displayName: Scan Source Code
      inputs:
        version: 'latest'
        path: './src'
        severities: 'CRITICAL,HIGH'
        exitCode: '0'

    - task: trivy@1
      displayName: Scan Backend Image with Trivy
      inputs:
        version: 'latest'
        loginDockerConfig: true
        # docker: false
        image: $(containerRegistry)/$(imageRepository_backend):$(tag)-$(GIT_COMMIT)
        severities: 'CRITICAL,HIGH'
        exitCode: '0'
        options: --timeout 15m

    # - task: Docker@2
    #   displayName: Push Backend Image
    #   inputs:
    #     command: push
    #     repository: $(imageRepository_backend)
    #     containerRegistry: $(dockerRegistryServiceConnection)
    #     tags: |
    #       $(tag)-$(GIT_COMMIT)
- stage: Build_FE
  dependsOn: Build_BE
  displayName: Build Frontend
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: "GIT_COMMIT=$(git rev-parse --short HEAD)\necho \"GIT_COMMIT: ${GIT_COMMIT}\"         \n# set env variable to allow next task to consume\necho \"##vso[task.setvariable variable=GIT_COMMIT]${GIT_COMMIT}\"\n#magic___^_^___line\n"
    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)

    - task: Docker@2
      displayName: Build Frontend Image
      inputs:
        command: buildAndPush
        repository: $(imageRepository_frontend)
        dockerfile: $(dockerfilePath_frontend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: "$(tag)-$(GIT_COMMIT)              \n#magic___^_^___line\n"
    - task: trivy@1
      displayName: Scan Source Code
      inputs:
        version: 'latest'
        path: './src'
        severities: 'CRITICAL,HIGH'
        exitCode: '0'

    - task: trivy@1
      displayName: Scan Backend Image with Trivy
      inputs:
        version: 'latest'
        loginDockerConfig: true
        # docker: false
        image: $(containerRegistry)/$(imageRepository_backend):$(tag)-$(GIT_COMMIT)
        severities: 'CRITICAL,HIGH'
        exitCode: '0'
        options: --timeout 15m

# - task: Docker@2
#   displayName: Push Frontend Image
#   inputs:
#     command: push
#     repository: $(imageRepository_frontend)
#     containerRegistry: $(dockerRegistryServiceConnection)
#     tags: |
#       $(tag)-$(GIT_COMMIT)
