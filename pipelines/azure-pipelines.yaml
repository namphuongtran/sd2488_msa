trigger:
- main

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'crpisharpdevase'
  containerRegistry: 'crpisharpdevase.azurecr.io'
  imageRepository_backend: 'backend'
  dockerfilePath_backend: '**/Dockerfile_Backend'
  imageRepository_frontend: 'frontend'  
  dockerfilePath_frontend: '**/Dockerfile_Frontend'
  imageRepository_database: 'database'
  dockerfilePath_database: '**/Dockerfile_Database'
  tag: '$(Build.BuildNumber)-$(Build.SourceBranchName)-$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'  

stages:
- stage: Build
  displayName: Build Application and Push to ACR
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          echo "GIT_COMMIT: ${GIT_COMMIT}"         
          # set env variable to allow next task to consume
          echo "##vso[task.setvariable variable=GIT_COMMIT]${GIT_COMMIT}"

    - task: Docker@2
      displayName: Login to ACR
      inputs:
        command: login
        containerRegistry: $(dockerRegistryServiceConnection)  

    - task: Docker@2
      displayName: Build Backend Image
      inputs:
        command: buildAndPush
        repository: $(imageRepository_backend)
        dockerfile: $(dockerfilePath_backend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)-$(GIT_COMMIT)

    - task: Docker@2
      displayName: Build Frontend Image
      inputs:
        command: buildAndPush
        repository: $(imageRepository_frontend)
        dockerfile: $(dockerfilePath_frontend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)-$(GIT_COMMIT)              

    - task: trivy@1
      displayName: Scan Source Code
      inputs:
        version: 'latest'
        path: './src'
        severities: 'CRITICAL,HIGH'
        exitCode: '0'
  
    - task: trivy@1
      displayName: Scan Backend Image with Trivy
      inputs:
        version: 'latest'
        loginDockerConfig: true
        image: $(containerRegistry)/$(imageRepository_backend):$(tag)-$(GIT_COMMIT)
        severities: 'CRITICAL,HIGH'
        exitCode: '0'
        options: --timeout 15m

    - task: trivy@1
      displayName: Scan Backend Image with Trivy
      inputs:
        version: 'latest'
        loginDockerConfig: true
        image: $(containerRegistry)/$(imageRepository_backend):$(tag)-$(GIT_COMMIT)
        severities: 'CRITICAL,HIGH'
        exitCode: '0'
        options: --timeout 15m
      
    - task: PublishPipelineArtifact@1
      inputs:
        artifactName: 'manifests'
        path: '$(Build.SourcesDirectory)'    

- template: deploy.yaml # Template reference to cd.yml