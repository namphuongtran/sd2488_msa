trigger:
- main

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'crpisharpdevase'
  containerRegistry: 'crpisharpdeveus.azurecr.io'
  imageRepository_backend: 'backend'
  dockerfilePath_backend: '**/Dockerfile_Backend'
  imageRepository_frontend: 'frontend'  
  dockerfilePath_frontend: '**/Dockerfile_Frontend'
  imageRepository_database: 'database'
  dockerfilePath_database: '**/Dockerfile_Database'
  tag: '$(Build.BuildNumber)-$(Build.SourceBranchName)-$(Build.BuildId)'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'  

stages:
- stage: Build_BE
  displayName: Build Backend
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          echo "GIT_COMMIT: ${GIT_COMMIT}"         
          # set env variable to allow next task to consume
          echo "##vso[task.setvariable variable=GIT_COMMIT]${GIT_COMMIT}"
    - task: Docker@2
      displayName: Build Backend Image
      inputs:
        command: build
        repository: $(imageRepository_backend)
        dockerfile: $(dockerfilePath_backend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)-$(GIT_COMMIT)         
    - task: Docker@2
      displayName: Scan Backend Image with Trivy
      inputs:
        command: run
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository_backend)
        commandArgs: trivy --exit-code 1 $(dockerRegistry)/$(imageRepository_backend):$(tag)-$(GIT_COMMIT)
    - task: Docker@2
      displayName: Push Backend Image
      inputs:
        command: push
        repository: $(imageRepository_backend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)-$(GIT_COMMIT)
- stage: Build_FE
  dependsOn: Build_BE
  displayName: Build Frontend
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          echo "GIT_COMMIT: ${GIT_COMMIT}"         
          # set env variable to allow next task to consume
          echo "##vso[task.setvariable variable=GIT_COMMIT]${GIT_COMMIT}"
    - task: Docker@2
      displayName: Build Frontend Image
      inputs:
        command: build
        repository: $(imageRepository_frontend)
        dockerfile: $(dockerfilePath_frontend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)-$(GIT_COMMIT)   
    - task: Docker@2
      displayName: Scan Frontend Image with Trivy
      inputs:
        command: run
        containerRegistry: $(dockerRegistryServiceConnection)
        repository: $(imageRepository_frontend)
        commandArgs: trivy --exit-code 1 $(dockerRegistry)/$(imageRepository_frontend):$(tag)-$(GIT_COMMIT)
    - task: Docker@2
      displayName: Push Frontend Image
      inputs:
        command: push
        repository: $(imageRepository_frontend)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)-$(GIT_COMMIT)
